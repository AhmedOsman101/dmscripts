#!/usr/bin/env bash
#
# Script name: dm-translate
# Description: Translate using Google Translate (through Lingva Translate)
# Dependencies: dmenu, python3, curl, and jq
# GitLab: https://www.gitlab.com/dwt1/dmscripts
# License: https://www.gitlab.com/dwt1/dmscripts/LICENSE
# Contributors: ifrendas

# Set with the flags "-e", "-u","-o pipefail" cause the script to fail
# if certain things happen, which is a good thing.  Otherwise, we can
# get hidden bugs that are hard to discover.
set -euo pipefail

_path="$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd "$(dirname "$(readlink "${BASH_SOURCE[0]}" || echo ".")")" && pwd)"
if [[  -f "${_path}/_dm-helper.sh" ]]; then
  # shellcheck disable=SC1090,SC1091
  source "${_path}/_dm-helper.sh"
else
  # shellcheck disable=SC1090
  echo "No helper-script found"
fi

# script will not hit this if there is no config-file to load
# shellcheck disable=SC1090
source "$(get_config)"

main() {
  # If $translate_list is not set to "manual", automatically get languages
  if [[ "${translate_list:-auto}" != "manual" ]]; then
    # Put language names in "lang_names" array
    mapfile -t lang_names < <(curl -Ss https://raw.githubusercontent.com/TheDavidDelta/lingva-translate/main/utils/languages.json |
        jq ".languages" |
        sed '1d;$d' |
        awk -F":" '{print $2}' |
        tr -d '",' |
        cut -c 2-)

    # Put language codes in "lang_codes" array
    mapfile -t lang_codes < <(curl -Ss https://raw.githubusercontent.com/TheDavidDelta/lingva-translate/main/utils/languages.json |
        jq ".languages" |
        sed '1d;$d' |
        awk -F":" '{print $1}' |
        tr -d '",' |
        cut -c 3-)

    # Add "Autodetect" option to lists
    lang_names+=("Autodetect")
    lang_codes+=("auto")
  fi

  # Warn user and exit if "lang_names" is unset
  if [[ -z ${lang_names+x} ]]; then
    echo "The 'lang_names' array must be set to manually set languages!"
    exit 1
  fi

  # Warn user and exit if "lang_codes" is unset
  if [[ -z ${lang_codes+x} ]]; then
    echo "The 'lang_codes' array must be set to manually set languages!"
    exit 1
  fi

  # Get the languages to translate from and to
  from_name=$(IFS=$'\n'; echo "${lang_names[*]}" | sort | ${DMENU} -i -l 20 -p 'Translate from:') "$@" || exit 1
  to_name=$(IFS=$'\n'; echo "${lang_names[*]}" | sort | ${DMENU} -i -l 20 -p 'Translate to:') "$@" || exit 1

  # shellcheck disable=SC2154
  # Get the matching language codes for the languages selected
  for ((i=0; i < ${#lang_names[@]}; ++i)); do
    if [ "$from_name" = "${lang_names[$i]}" ]; then
      from_code=${lang_codes[$i]}
    fi

    if [ "$to_name" = "${lang_names[$i]}" ]; then
      to_code=${lang_codes[$i]}
    fi
  done

  # Get text to translate
  query=$(echo "" | ${DMENU} -p "Translate (${from_code} -> ${to_code}):")

  # Encode to url encoding
  query=$(python3 -c "import sys, urllib.parse as ul; print (ul.quote_plus(sys.argv[1]))" "$query")

  # Get the translation
  translation=$(curl -Ss https://lingva.ml/api/v1/"${from_code}"/"${to_code}"/"${query}" | jq ".translation" | tr -d '"')

  # Copy translation to clipboard and send notification
  echo "$translation" | xclip -r -selection clipboard
  notify-send "Translation (in clipboard)" "$translation"
}

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "$@"
